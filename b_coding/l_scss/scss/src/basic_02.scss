/* basic_02.css */

@import "../setting/variable";


// -------------------------------------------------

#wrap{
  background-color: map-get($sampleColor, yellow);
  color: map-get($fontColor, black);
  background-image: url($url+'img001.jpg');
}

$juice : ('apple', 'mango', 'kiwi', 'grape', 'orange');
$juiceC : (#acc,#1ff,#faa,#fa5,#345);
// 1
// @for $i from 1 through length($juice) {
//   .#{nth($juice,$i)}_juice{
//     color:nth($juiceC,$i);
//   }
// }

// 2
// @each $j in $juice{
//   .#{$j}_juice{background-color: #aff;}
// }

$myJuice : (
  'apple' : #f33,
  'mango' : #fc9,
  'kiwi' : #7a6,
  'grape' : #a4a,
  'orange' : #f70
);

@each $key, $val in $myJuice {
  .#{$key}_juice{background-color: $val;}
}

$mainSlide : (
  'event' : 'eventMain.jpg',
  'best' : 'bestCut.jpg',
  'info' : 'infoMessage.jpg',
  'guide' : 'guideThum.png'
);

@each $sel, $img in $mainSlide {
  .slide_#{$sel}{
    background-image: url($url+$img);
  }  
}
$color : #acc, #fac, #acf;
$wire : (
  ('#headBox',100px,200px,nth($color,1)),
  ('#sectionBox',100%,300px,nth($color,2)),
  ('#conBox',100%,200px,nth($color,3))
);

@each $sel, $wid, $height, $color in $wire{
  #{$sel}{
    width: $wid; height: $height; background-color: $color;
  }
}

// function --------------------------------------------------------
$device : (
  mobile : 640,
  tab : 1024,
  laptop : 1280, 
  pcfull : 1920
);

@function Mob($val){
  $convert : $val / map-get($device, mobile) * 100;
  @return $convert + vw;
}

@function Tab($val){
  $convert : $val / map-get($device, tab) * 100;
  @return $convert + vw;
}

@function Laptop($val){
  $convert : $val / map-get($device, laptop) * 100;
  @return $convert + vw;
}

@function Pc($val){
  $convert : $val / map-get($device, pcfull) * 100;
  @return $convert + vw;
}

@function vw($val, $device){
  $convert : $val / $device * 100;
  @return $convert + vw;
}

@mixin Rec($s){
  width: $s+px; height: $s+px; border-radius: ($s/3)+px;
  width: ($s/16)+rem; height: ($s/16)+rem; border-radius: ($s/3/16)+rem;

  &>a{
    display: block;
    width: 100%; height: 100%; background-color: inherit;
  }
}

.box_01{
  width: Pc(500); height: vw(200,800);
}

.box_02{
  @include Rec(100);
}


// ------------------------------------------------------

#fnb{
  background-color: #fff;
  color: #333;
}

$b : #faa;
@function IfColor($color){  
  @if $b == #333{
    @return #fff;
  }@else if $b == #fff{ 
    @return #333;
  }@else{
    @return #676767;
  }
}

@mixin myColor($c){
  background-color: $c;
  color: IfColor($c);

}

// 어디에도 존재하지 않는 가상선택자, 소규모일땐 사용하지만 주로 사용하지 않음
%Selcet{border: 1px solid #fff; box-sizing: border-box;}

// p{}
// .p{}
// #p{}
// %p{} 

#footBox{
  @include myColor($b);
  // background-color: $b;
  // color: IfColor($b);
}

// extend css상에서 순서가 바뀌는 단점이 있음
h1{font-size: 1rem;}
h2{@extend h1;}
h3{@extend h1;}
h4{@extend #footBox;}
h5{@extend %Selcet;}
h6{@extend %Selcet;}

// 정리
// -------------------------------------------------------------------------
/*
// 01 : map
    - map은 다른 언어기준(js)의 형식에서는 객체라고 불리우는 형식과 매우 유사한 타입
    - $변수 : (키: 값, 키: 값, 키: 값);
    - 호출하여 사용할 경우에는 map-get($변수명, 키)
    - 개별 변수형태보다 여러개의 값을 가질 수 있다는 장점,
    - 리스트 형태보다 키명이 존재하여 그 값을 파악하기 쉽다는 장점

//  ---------------------------------------------------------------
// 02 : @each
    - @each는 @for문의 형식을 간소화하여 처리하는 기능이지만, @for구문보다 다양한 기능을 사용할 수 있다.
    - @each $임의변수 in $리스트변수 {}
    - @each $임의변수, $임의변수2 in $map형식변수 {}
    - @each $임의변수, $임의변수2, $임의변수3 .. in $이중리스트형식의변수 {}

// 03 : @function
    - @function 함수의 기능을 사용하는 것으로 js에서의 function과 매우 유사하다
    - 반환(@return)되는 값이 존재해야하며, 반환값은 하나여야 한다.
    - @function 함수명(매개변수){ 기능수행 ... @return 반환값; }

// 04 : @if
    - @if는 조건문의 형식을 가지고 있는 형태로서, 상황에 맞게 기능을 수행하게 만드는 것
    - @function이나 @mixin형식 내부에서 동장하는 것이 가장 사용하기 쉬운 형태
    - @if true{  }@else if true{  }else{  }    

// 05 : @extend || %select{}
    - 선택자의 경우 ','를 이용하여 멀티 선택을 할 수 있도록 제작된 형태의 기능
    - 가상의 클래스 형식(%선택자이름 {})을 제작하여 사용할 수도 있고,
    - 기존의 선택자를 대신 사용하여 함께 붙여서 처리할 수도 있다.
    - 단, 사용상의 위치가 애매해 지거나, 한번에 해석하기 꽤 어려운 부분들이 있어 가급적 사용을 자제할 것을 권장
    - .box{width: 100px; height: 200px; background-color: #777;}
      .box2{@extend .box}
      ==> .box, .box2 {width: 100px; height: 200px; background-color:#777;}

// 06 : @mixin
    - @mixin의 형태는 복잡하고 다양한 선택자, 기능, 속성등의 형태를 한번에 수행가능하도록 만들어진 기능
    - @mixin은 생성할때 만들어지는 형태, 불러올 경우에는 @include를 이용하여 불러오게 된다.
    - @mixin Test(){}   ==호출==> @include Test();
    - 복합적으로 중첩해서 사용 할 수있음

*/

@mixin RecRem($s){
  width: $s+px; 
  width: ($s/16)+rem;
  height: ($s/16)+rem;
  height: $s+px; 
  border-radius: ($s/4)+px;
  border-radius: ($s/4/16)+rem;
}

#size{
  @include RecRem(50);
}
